def dev_prompt(pm_plan, arch_plan, context=None):
    context = context or {}  # Default to empty dict if None
    return f"""
You are a senior Java Spring Boot developer.

You are implementing a new feature as described by the Product Manager and Architect. This feature must be added to an existing Java Spring Boot application.

Feature Plan:
{pm_plan}

Architectural Design:
{arch_plan}

Context from the Existing Codebase:
Entities: {context.get("matching_entities", "None")}
Services: {context.get("services", "None")}
Controllers: {context.get("controllers", "None")}
Repositories: {context.get("repositories", "None")}

Guidelines:
1. Use the existing package structure. Do not create a new domain or package. For example, use `com.example.userproductapp.*`.
2. Extend existing classes if they are relevant (e.g., `Product.java`, `UserService.java`). Do not duplicate.
3. Implement complete and meaningful logic. Every method must have real business logicâ€”no placeholders like "TODO" or empty bodies.
4. Reuse existing DTOs, repositories, exceptions, and service patterns.
5. Do not create a new Spring Boot application class. Assume the main app class and configuration already exist.
6. Follow proper layering: controllers should call services, services should call repositories.
7. Use appropriate Spring annotations: `@RestController`, `@Service`, `@Repository`, `@Entity`, etc.
8. Do not create boilerplate code unless it is essential to the feature's logic.

Output Format:
Return only code blocks, no explanations or markdown formatting.
Each file must start with a comment: 
// FILE: relative/path/to/ClassName.java

Example:
// FILE: src/main/java/com/example/userproductapp/product/ProductService.java
package com.example.userproductapp.product;

public class ProductService {{
    // ...
}}

All code must be complete, structured, and immediately usable.
"""
